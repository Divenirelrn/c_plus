// storage_model.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
//

#include <iostream>

/*
* 程序的内存模型
* 
* 代码区：存放二进制代码
* 全局区：全局变量、静态变量、常量
* 栈：由编译器分配与释放，局部变量、参数
* 堆：由程序员分配与释放
* 
* 代码区（程序运行前就存在）：
*   存放CPU执行的机器指令
*   代码区是共享的，对于频繁被执行的程序，只需内存中有一份即可
*   代码区是只读的，防止意外修改
* 
* 全局区（程序运行前就存在）：
*   main函数中的也是局部变量
*   static int a = 10; //静态变量
*   const修饰的全局变量（全局常量）：
*       const int a = 10;                                                                                     *用指针操作内存
* 
* 栈（程序运行后才存在）：
*   局部变量（指针在栈上）
*   函数参数
*   不要返回局部变量的地址
*   
* 堆：
*   在堆区开辟空间：new
*   int *p = new int(10); //创建一个变量
* 
* new运算符：
*   空间的释放：delete p;
*   在堆区开辟数组：
*       int *arr = new int[10]; //创建一个数组
*       arr[0] = 100;
*       delete []arr;
*   
* static:
*   static局部变量 将一个变量声明为函数的局部变量，那么这个局部变量在函数执行完成之后不会被释放，而是继续保留在内存中
    static 全局变量 表示一个变量在当前文件的全局内可访问
    static 函数 表示一个函数只能在当前文件中被访问
    static 类成员变量 表示这个成员为全类所共有
    static 类成员函数 表示这个函数为全类所共有，而且只能访问静态成员变量  
* 
* const:
*   const 常量：定义时就初始化，以后不能更改。
    const 形参：func(const int a){};该形参在函数里不能改变
    const修饰类成员函数：该函数对成员变量只能进行只读操作
*
  static作用：
    （1）函数体内static变量的作用范围为该函数体，该变量的内存只被分配一次，因此其值在下次调用时仍维持上次的值；
    （2）在模块内的static全局变量和函数可以被模块内的函数访问，但不能被模块外其它函数访问；
    （3）在类中的static成员变量属于整个类所拥有，对类的所有对象只有一份拷贝；
    （4）在类中的static成员函数属于整个类所拥有，这个函数不接收this指针，因而只能访问类的static成员变量。

  const作用:
    （1）阻止一个变量被改变
    （2）声明常量指针和指针常量
    （3）const修饰形参，表明它是一个输入参数，在函数内部不能改变其值；
    （4）对于类的成员函数，若指定其为const类型，则表明其是一个常函数，不能修改类的成员变量；
    （5）对于类的成员函数，有时候必须指定其返回值为const类型，以使得其返回值不为”左值”。

*/

int main()
{
    std::cout << "Hello World!\n";
}
